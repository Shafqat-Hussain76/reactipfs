{"ast":null,"code":"import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\n\nexport function stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = getProtocol(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path === true) {\n      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\n\nexport function stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1]);\n    }\n\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\n\nexport function stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\n\nexport function tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\n\nexport function tuplesToBytes(tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\nexport function sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n}\nexport function bytesToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = getProtocol(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n}\n/**\n * Uint8Array -> String\n */\n\nexport function bytesToString(buf) {\n  const a = bytesToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\n\nexport function stringToBytes(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\n\nexport function fromString(str) {\n  return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\n\nexport function fromBytes(buf) {\n  const err = validateBytes(buf);\n\n  if (err != null) {\n    throw err;\n  }\n\n  return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n  try {\n    bytesToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\nexport function isValidBytes(buf) {\n  return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\nexport function ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n  const proto = getProtocol(tup[0]);\n  return proto;\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAM,IAAIC,gBAAnB,QAA2C,oBAA3C;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAGA;;;;AAGA,OAAM,SAAUC,oBAAV,CAAgCC,GAAhC,EAA2C;EAC/C,MAAMC,MAAM,GAAG,EAAf;EACA,MAAMC,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,EAAeC,KAAf,CAAqB,CAArB,CAAd,CAF+C,CAET;;EACtC,IAAIF,KAAK,CAACG,MAAN,KAAiB,CAAjB,IAAsBH,KAAK,CAAC,CAAD,CAAL,KAAa,EAAvC,EAA2C;IACzC,OAAO,EAAP;EACD;;EAED,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;IACrC,MAAMC,IAAI,GAAGL,KAAK,CAACI,CAAD,CAAlB;IACA,MAAME,KAAK,GAAGf,WAAW,CAACc,IAAD,CAAzB;;IAEA,IAAIC,KAAK,CAACC,IAAN,KAAe,CAAnB,EAAsB;MACpBR,MAAM,CAACS,IAAP,CAAY,CAACH,IAAD,CAAZ;MACA;IACD;;IAEDD,CAAC,GAToC,CASjC;;IACJ,IAAIA,CAAC,IAAIJ,KAAK,CAACG,MAAf,EAAuB;MACrB,MAAMM,UAAU,CAAC,sBAAsBX,GAAvB,CAAhB;IACD,CAZoC,CAcrC;;;IACA,IAAIQ,KAAK,CAACI,IAAN,KAAe,IAAnB,EAAyB;MACvBX,MAAM,CAACS,IAAP,CAAY,CACVH,IADU,EAEV;MACA;MACA;MACAM,SAAS,CAACX,KAAK,CAACE,KAAN,CAAYE,CAAZ,EAAeQ,IAAf,CAAoB,GAApB,CAAD,CALC,CAAZ;MAOA;IACD;;IAEDb,MAAM,CAACS,IAAP,CAAY,CAACH,IAAD,EAAOL,KAAK,CAACI,CAAD,CAAZ,CAAZ;EACD;;EAED,OAAOL,MAAP;AACD;AAED;;;;AAGA,OAAM,SAAUc,oBAAV,CAAgCd,MAAhC,EAAgE;EACpE,MAAMC,KAAK,GAAa,EAAxB;EACAD,MAAM,CAACe,GAAP,CAAYC,GAAD,IAAQ;IACjB,MAAMT,KAAK,GAAGU,cAAc,CAACD,GAAD,CAA5B;IACAf,KAAK,CAACQ,IAAN,CAAWF,KAAK,CAACW,IAAjB;;IACA,IAAIF,GAAG,CAACZ,MAAJ,GAAa,CAAb,IAAkBY,GAAG,CAAC,CAAD,CAAH,IAAU,IAAhC,EAAsC;MACpCf,KAAK,CAACQ,IAAN,CAAWO,GAAG,CAAC,CAAD,CAAd;IACD;;IACD,OAAO,IAAP;EACD,CAPD;EASA,OAAOJ,SAAS,CAACX,KAAK,CAACY,IAAN,CAAW,GAAX,CAAD,CAAhB;AACD;AAED;;;;AAGA,OAAM,SAAUM,oBAAV,CAAgCnB,MAAhC,EAAgE;EACpE,OAAOA,MAAM,CAACe,GAAP,CAAYC,GAAD,IAAQ;IACxB,IAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAL,EAAyB;MACvBA,GAAG,GAAG,CAACA,GAAD,CAAN;IACD;;IACD,MAAMT,KAAK,GAAGU,cAAc,CAACD,GAAD,CAA5B;;IACA,IAAIA,GAAG,CAACZ,MAAJ,GAAa,CAAjB,EAAoB;MAClB,OAAO,CAACG,KAAK,CAACe,IAAP,EAAahC,cAAc,CAACiB,KAAK,CAACe,IAAP,EAAaN,GAAG,CAAC,CAAD,CAAhB,CAA3B,CAAP;IACD;;IACD,OAAO,CAACT,KAAK,CAACe,IAAP,CAAP;EACD,CATM,CAAP;AAUD;AAED;;;;;;AAKA,OAAM,SAAUC,oBAAV,CAAgCvB,MAAhC,EAAoE;EACxE,OAAOA,MAAM,CAACe,GAAP,CAAWC,GAAG,IAAG;IACtB,MAAMT,KAAK,GAAGU,cAAc,CAACD,GAAD,CAA5B;;IACA,IAAIA,GAAG,CAAC,CAAD,CAAH,IAAU,IAAd,EAAoB;MAClB,OAAO,CAACT,KAAK,CAACe,IAAP,EAAa/B,eAAe,CAACgB,KAAK,CAACe,IAAP,EAAaN,GAAG,CAAC,CAAD,CAAhB,CAA5B,CAAP;IACD;;IACD,OAAO,CAACT,KAAK,CAACe,IAAP,CAAP;EACD,CANM,CAAP;AAOD;AAED;;;;AAGA,OAAM,SAAUE,aAAV,CAAyBxB,MAAzB,EAA6D;EACjE,OAAOyB,SAAS,CAAC9B,gBAAgB,CAACK,MAAM,CAACe,GAAP,CAAYC,GAAD,IAAQ;IACnD,MAAMT,KAAK,GAAGU,cAAc,CAACD,GAAD,CAA5B;IACA,IAAIU,GAAG,GAAGC,UAAU,CAACC,IAAX,CAAgBnC,MAAM,CAACoC,MAAP,CAActB,KAAK,CAACe,IAApB,CAAhB,CAAV;;IAEA,IAAIN,GAAG,CAACZ,MAAJ,GAAa,CAAb,IAAkBY,GAAG,CAAC,CAAD,CAAH,IAAU,IAAhC,EAAsC;MACpCU,GAAG,GAAG/B,gBAAgB,CAAC,CAAC+B,GAAD,EAAMV,GAAG,CAAC,CAAD,CAAT,CAAD,CAAtB,CADoC,CACE;IACvC;;IAED,OAAOU,GAAP;EACD,CATiC,CAAD,CAAjB,CAAhB;AAUD;AAED,OAAM,SAAUI,WAAV,CAAuBzB,CAAvB,EAAoC0B,IAApC,EAA+D;EACnE,IAAI1B,CAAC,CAACG,IAAF,GAAS,CAAb,EAAgB;IACd,OAAOH,CAAC,CAACG,IAAF,GAAS,CAAhB;EACD,CAFD,MAEO,IAAIH,CAAC,CAACG,IAAF,KAAW,CAAf,EAAkB;IACvB,OAAO,CAAP;EACD,CAFM,MAEA;IACL,MAAMA,IAAI,GAAGf,MAAM,CAACuC,MAAP,CAAcD,IAAd,CAAb;IACA,OAAOvB,IAAI,GAAGf,MAAM,CAACuC,MAAP,CAAcC,KAA5B;EACD;AACF;AAED,OAAM,SAAUC,aAAV,CAAyBR,GAAzB,EAAwC;EAC5C,MAAM1B,MAAM,GAAiC,EAA7C;EACA,IAAImC,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGT,GAAG,CAACtB,MAAf,EAAuB;IACrB,MAAMkB,IAAI,GAAG7B,MAAM,CAACuC,MAAP,CAAcN,GAAd,EAAmBS,CAAnB,CAAb;IACA,MAAMC,CAAC,GAAG3C,MAAM,CAACuC,MAAP,CAAcC,KAAxB;IAEA,MAAM5B,CAAC,GAAGb,WAAW,CAAC8B,IAAD,CAArB;IAEA,MAAMd,IAAI,GAAGsB,WAAW,CAACzB,CAAD,EAAIqB,GAAG,CAACvB,KAAJ,CAAUgC,CAAC,GAAGC,CAAd,CAAJ,CAAxB;;IAEA,IAAI5B,IAAI,KAAK,CAAb,EAAgB;MACdR,MAAM,CAACS,IAAP,CAAY,CAACa,IAAD,CAAZ;MACAa,CAAC,IAAIC,CAAL;MACA;IACD;;IAED,MAAML,IAAI,GAAGL,GAAG,CAACvB,KAAJ,CAAUgC,CAAC,GAAGC,CAAd,EAAiBD,CAAC,GAAGC,CAAJ,GAAQ5B,IAAzB,CAAb;IAEA2B,CAAC,IAAK3B,IAAI,GAAG4B,CAAb;;IAEA,IAAID,CAAC,GAAGT,GAAG,CAACtB,MAAZ,EAAoB;MAAE;MACpB,MAAMM,UAAU,CAAC,iCAAiCb,kBAAkB,CAAC6B,GAAD,EAAM,QAAN,CAApD,CAAhB;IACD,CApBoB,CAsBrB;;;IACA1B,MAAM,CAACS,IAAP,CAAY,CAACa,IAAD,EAAOS,IAAP,CAAZ;EACD;;EAED,OAAO/B,MAAP;AACD;AAED;;;;AAGA,OAAM,SAAUqC,aAAV,CAAyBX,GAAzB,EAAwC;EAC5C,MAAMY,CAAC,GAAGJ,aAAa,CAACR,GAAD,CAAvB;EACA,MAAMa,CAAC,GAAGhB,oBAAoB,CAACe,CAAD,CAA9B;EACA,OAAOxB,oBAAoB,CAACyB,CAAD,CAA3B;AACD;AAED;;;;AAGA,OAAM,SAAUC,aAAV,CAAyBzC,GAAzB,EAAoC;EACxCA,GAAG,GAAGa,SAAS,CAACb,GAAD,CAAf;EACA,MAAMuC,CAAC,GAAGxC,oBAAoB,CAACC,GAAD,CAA9B;EACA,MAAMwC,CAAC,GAAGpB,oBAAoB,CAACmB,CAAD,CAA9B;EAEA,OAAOd,aAAa,CAACe,CAAD,CAApB;AACD;AAED;;;;AAGA,OAAM,SAAUE,UAAV,CAAsB1C,GAAtB,EAAiC;EACrC,OAAOyC,aAAa,CAACzC,GAAD,CAApB;AACD;AAED;;;;AAGA,OAAM,SAAU0B,SAAV,CAAqBC,GAArB,EAAoC;EACxC,MAAMgB,GAAG,GAAGC,aAAa,CAACjB,GAAD,CAAzB;;EACA,IAAIgB,GAAG,IAAI,IAAX,EAAiB;IACf,MAAMA,GAAN;EACD;;EACD,OAAOf,UAAU,CAACC,IAAX,CAAgBF,GAAhB,CAAP,CALwC,CAKZ;AAC7B;AAED,OAAM,SAAUiB,aAAV,CAAyBjB,GAAzB,EAAwC;EAC5C,IAAI;IACFQ,aAAa,CAACR,GAAD,CAAb,CADE,CACiB;EACpB,CAFD,CAEE,OAAOgB,GAAP,EAAY;IACZ,OAAOA,GAAP;EACD;AACF;AAED,OAAM,SAAUE,YAAV,CAAwBlB,GAAxB,EAAuC;EAC3C,OAAOiB,aAAa,CAACjB,GAAD,CAAb,KAAuBmB,SAA9B;AACD;AAED,OAAM,SAAUjC,SAAV,CAAqBb,GAArB,EAAgC;EACpC,OAAO,MAAMA,GAAG,CAAC+C,IAAJ,GAAW5C,KAAX,CAAiB,GAAjB,EAAsB6C,MAAtB,CAA8BT,CAAD,IAAOA,CAApC,EAAuCzB,IAAvC,CAA4C,GAA5C,CAAb;AACD;AAED,OAAM,SAAUH,UAAV,CAAsBX,GAAtB,EAAiC;EACrC,OAAO,IAAIiD,KAAJ,CAAU,4BAA4BjD,GAAtC,CAAP;AACD;AAED,OAAM,SAAUkB,cAAV,CAA0BD,GAA1B,EAAoC;EACxC,MAAMT,KAAK,GAAGf,WAAW,CAACwB,GAAG,CAAC,CAAD,CAAJ,CAAzB;EACA,OAAOT,KAAP;AACD","names":["convertToBytes","convertToString","getProtocol","varint","concat","uint8ArrayConcat","toString","uint8ArrayToString","stringToStringTuples","str","tuples","parts","split","slice","length","p","part","proto","size","push","ParseError","path","cleanPath","join","stringTuplesToString","map","tup","protoFromTuple","name","stringTuplesToTuples","Array","isArray","code","tuplesToStringTuples","tuplesToBytes","fromBytes","buf","Uint8Array","from","encode","sizeForAddr","addr","decode","bytes","bytesToTuples","i","n","bytesToString","a","b","stringToBytes","fromString","err","validateBytes","isValidBytes","undefined","trim","filter","Error"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@multiformats\\multiaddr\\src\\codec.ts"],"sourcesContent":["import { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport varint from 'varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Protocol } from './protocols-table.js'\n\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples (str: string) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString (tuples: Array<[number, string?]>) {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples (tuples: Array<string[] | string>): Array<[number, Uint8Array?]> {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples (tuples: Array<[number, Uint8Array?]>): Array<[number, string?]> {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Array<[number, Uint8Array?]>) {\n  return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nexport function sizeForAddr (p: Protocol, addr: Uint8Array | number[]) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Array<[number, Uint8Array?]> {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n/**\n * Uint8Array -> String\n */\nexport function bytesToString (buf: Uint8Array) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes (str: string) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function fromString (str: string) {\n  return stringToBytes(str)\n}\n\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes (buf: Uint8Array) {\n  const err = validateBytes(buf)\n  if (err != null) {\n    throw err\n  }\n  return Uint8Array.from(buf) // copy\n}\n\nexport function validateBytes (buf: Uint8Array) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nexport function isValidBytes (buf: Uint8Array) {\n  return validateBytes(buf) === undefined\n}\n\nexport function cleanPath (str: string) {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string) {\n  return new Error('Error parsing address: ' + str)\n}\n\nexport function protoFromTuple (tup: any[]) {\n  const proto = getProtocol(tup[0])\n  return proto\n}\n"]},"metadata":{},"sourceType":"module"}