{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      path,\n      recursive,\n      metadata\n    } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return addAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createAddAll","api","addAll","source","options","path","recursive","metadata","res","post","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","pin","ndjson","Pins","cid","parse"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/pin/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC3C;AACF;AACA;EACE,gBAAiBC,MAAjB,CAAyBC,MAAzB,EAA+C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC7C,WAAW,MAAM;MAAEC,IAAF;MAAQC,SAAR;MAAmBC;IAAnB,CAAjB,IAAkDT,cAAc,CAACK,MAAD,CAAhE,EAA0E;MACxE,MAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;QACpCC,MAAM,EAAEN,OAAO,CAACM,MADoB;QAEpCC,YAAY,EAAEZ,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;UAE9BQ,GAAG,EAAEP,IAFyB;UAG9BC,SAH8B;UAI9BC,QAAQ,EAAEA,QAAQ,GAAGM,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAH,GAA8BQ,SAJlB;UAK9BC,MAAM,EAAE;QALsB,CAAD,CAFK;QASpCC,OAAO,EAAEb,OAAO,CAACa;MATmB,CAApB,CAAlB;;MAYA,WAAW,MAAMC,GAAjB,IAAwBV,GAAG,CAACW,MAAJ,EAAxB,EAAsC;QACpC,IAAID,GAAG,CAACE,IAAR,EAAc;UAAE;UACd,KAAK,MAAMC,GAAX,IAAkBH,GAAG,CAACE,IAAtB,EAA4B;YAC1B,MAAMxB,GAAG,CAAC0B,KAAJ,CAAUD,GAAV,CAAN;UACD;;UACD;QACD;;QAED,MAAMzB,GAAG,CAAC0B,KAAJ,CAAUJ,GAAV,CAAN;MACD;IACF;EACF;;EACD,OAAOhB,MAAP;AACD,CA/BoC,CAA9B"},"metadata":{},"sourceType":"module"}