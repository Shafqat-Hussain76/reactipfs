{"ast":null,"code":"import { isIPv4, isIPv6 } from 'is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from 'is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\n\nexport const toBytes = function (ip) {\n  let offset = 0;\n  let result;\n\n  if (isV4(ip)) {\n    result = new Uint8Array(offset + 4);\n    ip.split(/\\./g).forEach(byte => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8);\n    let i;\n\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i]);\n      let v4Buffer;\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i]);\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n\n      const argv = [i, 1];\n\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n\n      sections.splice.apply(sections, argv);\n    }\n\n    result = new Uint8Array(offset + 16);\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (result == null) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n}; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n\nexport const toString = function (buf, offset, length) {\n  offset = ~~offset;\n  length = length ?? buf.length - offset;\n  const result = [];\n  let string = '';\n  const view = new DataView(buf.buffer);\n\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i]);\n    }\n\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16));\n    }\n\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n\n  return string;\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,OAA/B;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAEA,SAASC,IAAT,QAAqB,OAArB;AACA,OAAO,MAAMC,IAAI,GAAGL,MAAb;AACP,OAAO,MAAMM,IAAI,GAAGL,MAAb,C,CAEP;AACA;;AACA,OAAO,MAAMM,OAAO,GAAG,UAAUC,EAAV,EAAoB;EACzC,IAAIC,MAAM,GAAG,CAAb;EACA,IAAIC,MAAJ;;EAEA,IAAIL,IAAI,CAACG,EAAD,CAAR,EAAc;IACZE,MAAM,GAAG,IAAIC,UAAJ,CAAeF,MAAM,GAAG,CAAxB,CAAT;IACAD,EAAE,CAACI,KAAH,CAAS,KAAT,EAAgBC,OAAhB,CAAyBC,IAAD,IAAS;MAC/BJ,MAAM,CAACD,MAAM,EAAP,CAAN,GAAmBM,QAAQ,CAACD,IAAD,EAAO,EAAP,CAAR,GAAqB,IAAxC;IACD,CAFD;EAGD,CALD,MAKO,IAAIR,IAAI,CAACE,EAAD,CAAR,EAAc;IACnB,MAAMQ,QAAQ,GAAGR,EAAE,CAACI,KAAH,CAAS,GAAT,EAAc,CAAd,CAAjB;IAEA,IAAIK,CAAJ;;IACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,MAAME,IAAI,GAAGd,IAAI,CAACW,QAAQ,CAACC,CAAD,CAAT,CAAjB;MACA,IAAIG,QAAJ;;MAEA,IAAID,IAAJ,EAAU;QACRC,QAAQ,GAAGb,OAAO,CAACS,QAAQ,CAACC,CAAD,CAAT,CAAlB;QACAD,QAAQ,CAACC,CAAD,CAAR,GAAcd,kBAAkB,CAACiB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAD,EAAuB,QAAvB,CAAhC;MACD;;MAED,IAAID,QAAQ,IAAI,IAAZ,IAAoB,EAAEH,CAAF,GAAM,CAA9B,EAAiC;QAC/BD,QAAQ,CAACM,MAAT,CAAgBL,CAAhB,EAAmB,CAAnB,EAAsBd,kBAAkB,CAACiB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAD,EAAuB,QAAvB,CAAxC;MACD;IACF;;IAED,IAAIL,QAAQ,CAAC,CAAD,CAAR,KAAgB,EAApB,EAAwB;MACtB,OAAOA,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4BF,QAAQ,CAACO,OAAT,CAAiB,GAAjB;IAC7B,CAFD,MAEO,IAAIP,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,KAAkC,EAAtC,EAA0C;MAC/C,OAAOF,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4BF,QAAQ,CAACQ,IAAT,CAAc,GAAd;IAC7B,CAFM,MAEA,IAAIR,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;MAC9B,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAb,IAAuBF,QAAQ,CAACC,CAAD,CAAR,KAAgB,EAAnD,EAAuDA,CAAC,EAAxD,CAA2D;;MAC3D,MAAMQ,IAAI,GAAkC,CAACR,CAAD,EAAI,CAAJ,CAA5C;;MACA,KAAKA,CAAC,GAAG,IAAID,QAAQ,CAACE,MAAtB,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;QACxCQ,IAAI,CAACD,IAAL,CAAU,GAAV;MACD;;MACDR,QAAQ,CAACM,MAAT,CAAgBI,KAAhB,CAAsBV,QAAtB,EAAgCS,IAAhC;IACD;;IAEDf,MAAM,GAAG,IAAIC,UAAJ,CAAeF,MAAM,GAAG,EAAxB,CAAT;;IACA,KAAKQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,MAAMU,IAAI,GAAGZ,QAAQ,CAACC,QAAQ,CAACC,CAAD,CAAT,EAAc,EAAd,CAArB;MACAP,MAAM,CAACD,MAAM,EAAP,CAAN,GAAoBkB,IAAI,IAAI,CAAT,GAAc,IAAjC;MACAjB,MAAM,CAACD,MAAM,EAAP,CAAN,GAAmBkB,IAAI,GAAG,IAA1B;IACD;EACF;;EAED,IAAIjB,MAAM,IAAI,IAAd,EAAoB;IAClB,MAAMkB,KAAK,CAAC,yBAAyBpB,EAA1B,CAAX;EACD;;EAED,OAAOE,MAAP;AACD,CArDM,C,CAuDP;;AACA,OAAO,MAAMR,QAAQ,GAAG,UAAU2B,GAAV,EAA2BpB,MAA3B,EAA2CS,MAA3C,EAAyD;EAC/ET,MAAM,GAAG,CAAC,CAACA,MAAX;EACAS,MAAM,GAAGA,MAAM,IAAKW,GAAG,CAACX,MAAJ,GAAaT,MAAjC;EAEA,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIoB,MAAM,GAAG,EAAb;EACA,MAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,GAAG,CAACI,MAAjB,CAAb;;EACA,IAAIf,MAAM,KAAK,CAAf,EAAkB;IAChB;IACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;MAC/BP,MAAM,CAACc,IAAP,CAAYK,GAAG,CAACpB,MAAM,GAAGQ,CAAV,CAAf;IACD;;IACDa,MAAM,GAAGpB,MAAM,CAACwB,IAAP,CAAY,GAAZ,CAAT;EACD,CAND,MAMO,IAAIhB,MAAM,KAAK,EAAf,EAAmB;IACxB;IACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,IAAI,CAAjC,EAAoC;MAClCP,MAAM,CAACc,IAAP,CAAYO,IAAI,CAACI,SAAL,CAAe1B,MAAM,GAAGQ,CAAxB,EAA2Bf,QAA3B,CAAoC,EAApC,CAAZ;IACD;;IACD4B,MAAM,GAAGpB,MAAM,CAACwB,IAAP,CAAY,GAAZ,CAAT;IACAJ,MAAM,GAAGA,MAAM,CAACM,OAAP,CAAe,oBAAf,EAAqC,QAArC,CAAT;IACAN,MAAM,GAAGA,MAAM,CAACM,OAAP,CAAe,QAAf,EAAyB,IAAzB,CAAT;EACD;;EAED,OAAON,MAAP;AACD,CAxBM","names":["isIPv4","isIPv6","toString","uint8ArrayToString","isIP","isV4","isV6","toBytes","ip","offset","result","Uint8Array","split","forEach","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","splice","unshift","push","argv","apply","word","Error","buf","string","view","DataView","buffer","join","getUint16","replace"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@multiformats\\multiaddr\\src\\ip.ts"],"sourcesContent":["import { isIPv4, isIPv6 } from 'is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from 'is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  let result\n\n  if (isV4(ip)) {\n    result = new Uint8Array(offset + 4)\n    ip.split(/\\./g).forEach((byte) => {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (result == null) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number, length: number) {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const result = []\n  let string = ''\n  const view = new DataView(buf.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n"]},"metadata":{},"sourceType":"module"}