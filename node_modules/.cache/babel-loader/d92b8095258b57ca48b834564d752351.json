{"ast":null,"code":"import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport { isBytes, isReadableStream, isBlob } from './utils.js';\n/**\n * @template T\n * @param {T} thing\n */\n\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\n\n\nexport async function normaliseContent(input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  } // Blob\n\n\n  if (isBlob(input)) {\n    return blobToIt(input);\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value */\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0));\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}","map":{"version":3,"names":["errCode","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","thing","normaliseContent","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","Uint8Array","push","Number","isInteger","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-core-utils/src/files/normalise-content.js"],"sourcesContent":["import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}