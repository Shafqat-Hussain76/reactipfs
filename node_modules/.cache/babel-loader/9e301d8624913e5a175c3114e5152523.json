{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData(cid, data) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid}`],\n        ...options\n      }),\n      ...(await multipartRequest([data], controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return CID.parse(Hash);\n  }\n\n  return setData;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createSetData","api","setData","cid","data","options","controller","AbortController","signal","res","post","searchParams","arg","headers","Hash","json","parse"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC5C;AACF;AACA;EACE,eAAeC,OAAf,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAiD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC/C;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;IACA,MAAMC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAA1B;IAEA,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,uBAAT,EAAkC;MAClDF,MADkD;MAElDG,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAE,CACF,GAAET,GAAI,EADJ,CADyB;QAI9B,GAAGE;MAJ2B,CAAD,CAFmB;MAQlD,IACE,MAAMT,gBAAgB,CAAC,CAACQ,IAAD,CAAD,EAASE,UAAT,EAAqBD,OAAO,CAACQ,OAA7B,CADxB;IARkD,CAAlC,CAAlB;IAaA,MAAM;MAAEC;IAAF,IAAW,MAAML,GAAG,CAACM,IAAJ,EAAvB;IAEA,OAAOpB,GAAG,CAACqB,KAAJ,CAAUF,IAAV,CAAP;EACD;;EACD,OAAOZ,OAAP;AACD,CA3BqC,CAA/B"},"metadata":{},"sourceType":"module"}