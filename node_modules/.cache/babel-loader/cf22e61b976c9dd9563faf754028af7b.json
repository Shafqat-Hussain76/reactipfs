{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { bases } from 'multiformats/basics';\nimport { base58btc } from 'multiformats/bases/base58';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport errcode from 'err-code';\nimport { symbol } from '@libp2p/interface-peer-id';\nconst baseDecoder = Object.values(bases).map(codec => codec.decoder) // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n.reduce((acc, curr) => acc.or(curr), bases.identity.decoder); // these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\n\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH = 37;\n\nclass PeerIdImpl {\n  constructor(init) {\n    this.type = init.type;\n    this.multihash = init.multihash;\n    this.privateKey = init.privateKey; // mark string cache as non-enumerable\n\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return `PeerId(${this.toString()})`;\n  }\n\n  get [symbol]() {\n    return true;\n  }\n\n  toString() {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1);\n    }\n\n    return this.string;\n  } // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n\n\n  toCID() {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n  }\n\n  toBytes() {\n    return this.multihash.bytes;\n  }\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n\n\n  equals(id) {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id);\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this);\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n    } else {\n      throw new Error('not valid Id');\n    }\n  }\n\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'RSA'\n    });\n    this.type = 'RSA';\n    this.publicKey = init.publicKey;\n  }\n\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'Ed25519'\n    });\n    this.type = 'Ed25519';\n    this.publicKey = init.multihash.digest;\n  }\n\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'secp256k1'\n    });\n    this.type = 'secp256k1';\n    this.publicKey = init.multihash.digest;\n  }\n\n}\n\nexport function createPeerId(init) {\n  return new PeerIdImpl(init);\n}\nexport function peerIdFromPeerId(other) {\n  const err = errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS');\n\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other);\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other);\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other);\n  }\n\n  throw err;\n}\nexport function peerIdFromString(str, decoder) {\n  decoder = decoder ?? baseDecoder;\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`));\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({\n        multihash\n      });\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({\n        multihash\n      });\n    } else {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n  try {\n    const multihash = Digest.decode(buf);\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({\n          multihash\n        });\n      } else if (multihash.digest.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({\n          multihash\n        });\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf));\n  }\n\n  throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n  if (cid == null || cid.multihash == null || cid.version == null || cid.version === 1 && cid.code !== LIBP2P_KEY_CODE) {\n    throw new Error('Supplied PeerID CID is invalid');\n  }\n\n  const multihash = cid.multihash;\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({\n      multihash: cid.multihash\n    });\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({\n        multihash: cid.multihash\n      });\n    } else if (multihash.digest.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({\n        multihash: cid.multihash\n      });\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\n\nexport async function peerIdFromKeys(publicKey, privateKey) {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n\n  if (publicKey.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n\n  return new RSAPeerIdImpl({\n    multihash: await sha256.digest(publicKey),\n    publicKey,\n    privateKey\n  });\n}","map":{"version":3,"mappings":"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","names":["CID","bases","base58btc","Digest","identity","equals","uint8ArrayEquals","sha256","errcode","symbol","baseDecoder","Object","values","map","codec","decoder","reduce","acc","curr","or","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH","PeerIdImpl","constructor","init","type","multihash","privateKey","defineProperty","enumerable","writable","Symbol","toStringTag","toString","string","encode","bytes","slice","toCID","createV1","toBytes","toJSON","id","Uint8Array","peerIdFromString","Error","RSAPeerIdImpl","publicKey","Ed25519PeerIdImpl","digest","Secp256k1PeerIdImpl","createPeerId","peerIdFromPeerId","other","err","str","charAt","decode","startsWith","peerIdFromBytes","buf","code","length","peerIdFromCID","cid","version","peerIdFromKeys","create"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@libp2p\\peer-id\\src\\index.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { bases } from 'multiformats/basics'\nimport { base58btc } from 'multiformats/bases/base58'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport errcode from 'err-code'\nimport { Ed25519PeerId, RSAPeerId, Secp256k1PeerId, symbol } from '@libp2p/interface-peer-id'\nimport type { MultibaseDecoder } from 'multiformats/bases/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nconst baseDecoder = Object\n  .values(bases)\n  .map(codec => codec.decoder)\n  // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n  .reduce((acc, curr) => acc.or(curr), bases.identity.decoder)\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36\nconst MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH = 37\n\ninterface PeerIdInit {\n  type: 'RSA' | 'Ed25519' | 'secp256k1'\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\nclass PeerIdImpl {\n  public type: 'RSA' | 'Ed25519' | 'secp256k1'\n  public readonly multihash: MultihashDigest\n  public readonly privateKey?: Uint8Array\n  public readonly publicKey?: Uint8Array\n  private string?: string\n\n  constructor (init: PeerIdInit) {\n    this.type = init.type\n    this.multihash = init.multihash\n    this.privateKey = init.privateKey\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return `PeerId(${this.toString()})`\n  }\n\n  get [symbol] () {\n    return true\n  }\n\n  toString () {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID () {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toBytes () {\n    return this.multihash.bytes\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id: PeerId | Uint8Array | string): boolean {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this as PeerId)\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl implements RSAPeerId {\n  public readonly type = 'RSA'\n  public readonly publicKey?: Uint8Array\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl implements Ed25519PeerId {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl implements Secp256k1PeerId {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nexport function createPeerId (init: PeerIdInit) {\n  return new PeerIdImpl(init)\n}\n\nexport function peerIdFromPeerId (other: any): PeerId {\n  const err = errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS')\n\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other)\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other)\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other)\n  }\n\n  throw err\n}\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): PeerId {\n  decoder = decoder ?? baseDecoder\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`))\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({ multihash })\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({ multihash })\n    } else {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str))\n}\n\nexport function peerIdFromBytes (buf: Uint8Array) {\n  try {\n    const multihash = Digest.decode(buf)\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash })\n      } else if (multihash.digest.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash })\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf))\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): PeerId {\n  if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n    throw new Error('Supplied PeerID CID is invalid')\n  }\n\n  const multihash = cid.multihash\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({ multihash: cid.multihash })\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({ multihash: cid.multihash })\n    } else if (multihash.digest.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({ multihash: cid.multihash })\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys (publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId> {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  if (publicKey.length === MARSHALLED_SECP258K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey })\n}\n"]},"metadata":{},"sourceType":"module"}