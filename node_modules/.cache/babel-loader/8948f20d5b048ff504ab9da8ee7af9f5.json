{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path');\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return CID.parse(data.Cid);\n  }\n\n  return flush;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createFlush","api","flush","path","options","Error","res","post","signal","searchParams","arg","headers","data","json","parse","Cid"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/files/flush.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;EAC1C;AACF;AACA;EACE,eAAeC,KAAf,CAAsBC,IAAtB,EAA0C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACxC,IAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;MACrC,MAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;IACD;;IAED,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwB;MACxCC,MAAM,EAAEJ,OAAO,CAACI,MADwB;MAExCC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEP,IADyB;QAE9B,GAAGC;MAF2B,CAAD,CAFS;MAMxCO,OAAO,EAAEP,OAAO,CAACO;IANuB,CAAxB,CAAlB;IAQA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;IAEA,OAAOhB,GAAG,CAACiB,KAAJ,CAAUF,IAAI,CAACG,GAAf,CAAP;EACD;;EACD,OAAOb,KAAP;AACD,CAtBmC,CAA7B"},"metadata":{},"sourceType":"module"}