{"ast":null,"code":"import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\n\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  } // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n\n\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  } // Browser ReadableStream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // Iterable<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error it's (async)iterable\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield {\n        content: []\n      };\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  } // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n\n\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n\nasync function toFileObject(input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  /** @type {ImporterImportCandidate} */\n\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","content","push","Number","isInteger","path","mode","mtime","file"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js"],"sourcesContent":["import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error it's (async)iterable\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}