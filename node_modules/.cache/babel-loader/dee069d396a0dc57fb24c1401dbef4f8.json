{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { SendingQuery, PeerResponse, FinalPeer, QueryError, Provider, Value, AddingPeer, DialingPeer } from './response-types.js';\nimport { Multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\n/**\n * @typedef {import('@libp2p/interfaces/peer-id').PeerId} PeerId\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\n\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: peerIdFromString(ID),\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr)),\n          protocols: []\n        };\n      }),\n      providers: (event.Responses || []).map(_ref2 => {\n        let {\n          ID,\n          Addrs\n        } = _ref2;\n        return {\n          id: peerIdFromString(ID),\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr)),\n          protocols: []\n        };\n      }) // TODO: how to infer this from the go-ipfs response\n      // record: ???\n\n    };\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n\n    /** @type {import('@libp2p/interfaces/peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr)),\n        protocols: []\n      };\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(_ref3 => {\n        let {\n          ID,\n          Addrs\n        } = _ref3;\n        return {\n          id: peerIdFromString(ID),\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr)),\n          protocols: []\n        };\n      })\n    };\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(_ref4 => {\n      let {\n        ID\n      } = _ref4;\n      return peerIdFromString(ID);\n    });\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};","map":{"version":3,"names":["fromString","uint8ArrayFromString","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","Multiaddr","peerIdFromString","mapEvent","event","Type","name","type","from","ID","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","protocols","providers","peer","length","error","Error","Extra","value","peers"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/dht/map-event.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interfaces/peer-id').PeerId} PeerId\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interfaces/peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}