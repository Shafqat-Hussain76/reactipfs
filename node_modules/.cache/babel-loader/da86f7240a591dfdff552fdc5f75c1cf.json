{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from '@multiformats/multiaddr';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add(addr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map((\n      /** @type {string} */\n      ma) => new Multiaddr(ma))\n    };\n  }\n\n  return add;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","Multiaddr","createAdd","api","add","addr","options","res","post","signal","searchParams","arg","headers","Peers","json","map","ma"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/bootstrap/add.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return add\n})\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGH,SAAS,CAACI,GAAG,IAAI;EACxC;AACF;AACA;EACE,eAAeC,GAAf,CAAoBC,IAApB,EAAwC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACtC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;MAC1CC,MAAM,EAAEH,OAAO,CAACG,MAD0B;MAE1CC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEN,IADyB;QAE9B,GAAGC;MAF2B,CAAD,CAFW;MAM1CM,OAAO,EAAEN,OAAO,CAACM;IANyB,CAA1B,CAAlB;IASA,MAAM;MAAEC;IAAF,IAAY,MAAMN,GAAG,CAACO,IAAJ,EAAxB;IAEA,OAAO;MAAED,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;MAAC;MAAsBC,EAAvB,KAA8B,IAAIf,SAAJ,CAAce,EAAd,CAAxC;IAAT,CAAP;EACD;;EAED,OAAOZ,GAAP;AACD,CApBiC,CAA3B"},"metadata":{},"sourceType":"module"}