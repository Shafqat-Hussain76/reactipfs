{"ast":null,"code":"import debug from 'debug';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base64 } from 'multiformats/bases/base64'; // Add a formatter for converting to a base58 string\n\ndebug.formatters.b = v => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v);\n}; // Add a formatter for converting to a base32 string\n\n\ndebug.formatters.t = v => {\n  return v == null ? 'undefined' : base32.baseEncode(v);\n}; // Add a formatter for converting to a base64 string\n\n\ndebug.formatters.m = v => {\n  return v == null ? 'undefined' : base64.baseEncode(v);\n}; // Add a formatter for stringifying peer ids\n\n\ndebug.formatters.p = v => {\n  return v == null ? 'undefined' : v.toString();\n}; // Add a formatter for stringifying CIDs\n\n\ndebug.formatters.c = v => {\n  return v == null ? 'undefined' : v.toString();\n}; // Add a formatter for stringifying Datastore keys\n\n\ndebug.formatters.k = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n\nexport function logger(name) {\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace: debug(`${name}:trace`)\n  });\n}\nexport function disable() {\n  debug.disable();\n}\nexport function enable(namespaces) {\n  debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n  return debug.enabled(namespaces);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,MAAT,QAAuB,2BAAvB,C,CAKA;;AACAH,KAAK,CAACI,UAAN,CAAiBC,CAAjB,GAAsBC,CAAD,IAAmB;EACtC,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BL,SAAS,CAACM,UAAV,CAAqBD,CAArB,CAAjC;AACD,CAFD,C,CAIA;;;AACAN,KAAK,CAACI,UAAN,CAAiBI,CAAjB,GAAsBF,CAAD,IAAmB;EACtC,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BJ,MAAM,CAACK,UAAP,CAAkBD,CAAlB,CAAjC;AACD,CAFD,C,CAIA;;;AACAN,KAAK,CAACI,UAAN,CAAiBK,CAAjB,GAAsBH,CAAD,IAAmB;EACtC,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BH,MAAM,CAACI,UAAP,CAAkBD,CAAlB,CAAjC;AACD,CAFD,C,CAIA;;;AACAN,KAAK,CAACI,UAAN,CAAiBM,CAAjB,GAAsBJ,CAAD,IAAe;EAClC,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BA,CAAC,CAACK,QAAF,EAAjC;AACD,CAFD,C,CAIA;;;AACAX,KAAK,CAACI,UAAN,CAAiBQ,CAAjB,GAAsBN,CAAD,IAAY;EAC/B,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BA,CAAC,CAACK,QAAF,EAAjC;AACD,CAFD,C,CAIA;;;AACAX,KAAK,CAACI,UAAN,CAAiBS,CAAjB,GAAsBP,CAAD,IAAW;EAC9B,OAAOA,CAAC,IAAI,IAAL,GAAY,WAAZ,GAA0BA,CAAC,CAACK,QAAF,EAAjC;AACD,CAFD;;AAWA,OAAM,SAAUG,MAAV,CAAkBC,IAAlB,EAA8B;EAClC,OAAOC,MAAM,CAACC,MAAP,CAAcjB,KAAK,CAACe,IAAD,CAAnB,EAA2B;IAChCG,KAAK,EAAElB,KAAK,CAAC,GAAGe,IAAI,QAAR,CADoB;IAEhCI,KAAK,EAAEnB,KAAK,CAAC,GAAGe,IAAI,QAAR;EAFoB,CAA3B,CAAP;AAID;AAED,OAAM,SAAUK,OAAV,GAAiB;EACrBpB,KAAK,CAACoB,OAAN;AACD;AAED,OAAM,SAAUC,MAAV,CAAkBC,UAAlB,EAAoC;EACxCtB,KAAK,CAACqB,MAAN,CAAaC,UAAb;AACD;AAED,OAAM,SAAUC,OAAV,CAAmBD,UAAnB,EAAqC;EACzC,OAAOtB,KAAK,CAACuB,OAAN,CAAcD,UAAd,CAAP;AACD","names":["debug","base58btc","base32","base64","formatters","b","v","baseEncode","t","m","p","toString","c","k","logger","name","Object","assign","error","trace","disable","enable","namespaces","enabled"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@libp2p\\logger\\src\\index.ts"],"sourcesContent":["import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interfaces/peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nexport function logger (name: string): Logger {\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace: debug(`${name}:trace`)\n  })\n}\n\nexport function disable () {\n  debug.disable()\n}\n\nexport function enable (namespaces: string) {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string) {\n  return debug.enabled(namespaces)\n}\n"]},"metadata":{},"sourceType":"module"}