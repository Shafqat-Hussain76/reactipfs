{"ast":null,"code":"import { objectToCamel } from './lib/object-to-camel.js';\nimport { Multiaddr } from '@multiformats/multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = { ...objectToCamel(data)\n    };\n    output.id = peerIdFromString(output.id);\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((\n      /** @type {string} */\n      ma) => new Multiaddr(ma));\n    } // @ts-expect-error server output is not typed\n\n\n    return output;\n  }\n\n  return id;\n});","map":{"version":3,"names":["objectToCamel","Multiaddr","configure","toUrlSearchParams","peerIdFromString","createId","api","id","options","res","post","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,IAAI;EACvC;AACF;AACA;EACE,eAAeC,EAAf,GAAiC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC/B,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,IAAT,EAAe;MAC/BC,MAAM,EAAEH,OAAO,CAACG,MADe;MAE/BC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACM,MAAR,CAAeC,QAAf,EAAjB,GAA6CC,SADpB;QAE9B,GAAGR;MAF2B,CAAD,CAFA;MAM/BS,OAAO,EAAET,OAAO,CAACS;IANc,CAAf,CAAlB;IAQA,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;IAEA,MAAMC,MAAM,GAAG,EACb,GAAGpB,aAAa,CAACkB,IAAD;IADH,CAAf;IAIAE,MAAM,CAACb,EAAP,GAAYH,gBAAgB,CAACgB,MAAM,CAACb,EAAR,CAA5B;;IAEA,IAAIa,MAAM,CAACC,SAAX,EAAsB;MACpBD,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;MAAC;MAAsBC,EAAvB,KAA8B,IAAItB,SAAJ,CAAcsB,EAAd,CAAnD,CAAnB;IACD,CAnB8B,CAqB/B;;;IACA,OAAOH,MAAP;EACD;;EACD,OAAOb,EAAP;AACD,CA7BgC,CAA1B"},"metadata":{},"sourceType":"module"}