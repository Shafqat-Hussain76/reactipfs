{"ast":null,"code":"import * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst IP_CODES = [getProtocol('ip4').code, getProtocol('ip6').code];\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nconst P2P_CODES = [getProtocol('p2p').code, getProtocol('ipfs').code];\nconst TCP_UDP_CODES = [getProtocol('tcp').code, getProtocol('udp').code];\nconst resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\n\nexport class Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    } // Define symbol\n\n\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n\n\n  toString() {\n    return codec.bytesToString(this.bytes);\n  }\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n\n\n  toOptions() {\n    const codes = this.protoCodes();\n    const parts = this.toString().split('/').slice(1);\n    let transport;\n    let port;\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name;\n        port = 443;\n      } else {\n        transport = getProtocol(parts[2]).name;\n        port = parseInt(parts[3]);\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name;\n      port = 443;\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n\n    const opts = {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    };\n    return opts;\n  }\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n\n\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n\n\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n\n    return codes;\n  }\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n\n\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n\n\n  tuples() {\n    return codec.bytesToTuples(this.bytes);\n  }\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n\n\n  stringTuples() {\n    const t = codec.bytesToTuples(this.bytes);\n    return codec.tuplesToStringTuples(t);\n  }\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n\n\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n\n\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n\n    return new Multiaddr(s.slice(0, i));\n  }\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n\n\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n\n\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n\n        return false;\n      }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n      const tuple = tuples.pop();\n\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        } // try to parse peer id as CID\n\n\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n\n\n  getPath() {\n    let path = null;\n\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n\n        if (proto.path === true) {\n          return true;\n        }\n\n        return false;\n      })[0][1];\n\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n\n    return path;\n  }\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n\n\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n\n\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable); // Multiaddr is not resolvable?\n\n    if (resolvableProto == null) {\n      return [this];\n    }\n\n    const resolver = resolvers.get(resolvableProto.name);\n\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new Multiaddr(a));\n  }\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n\n\n  nodeAddress() {\n    const codes = this.protoCodes();\n    const names = this.protoNames();\n    const parts = this.toString().split('/').slice(1);\n    let protocol = getProtocol(parts[2]).code;\n    let port = parseInt(parts[3]); // default to https when protocol & port are omitted from DNS addrs\n\n    if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n      protocol = getProtocol('tcp').code;\n      port = 443;\n    }\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    } else if (!IP_CODES.includes(codes[0]) && !DNS_CODES.includes(codes[0])) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns, dns4, dns6, dnsaddr}\".`);\n    } else if (!TCP_UDP_CODES.includes(protocol)) {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`);\n    }\n\n    return {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      address: parts[1],\n      port // tcp or udp port\n\n    };\n  }\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n\n\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n\n    if (protos.length !== 2) {\n      return false;\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   */\n\n\n  static fromNodeAddress(addr, transport) {\n    if (addr == null) {\n      throw new Error('requires node address object');\n    }\n\n    if (transport == null) {\n      throw new Error('requires transport protocol');\n    }\n\n    let ip;\n\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4';\n        break;\n\n      case 6:\n        ip = 'ip6';\n        break;\n\n      default:\n        throw Error('Invalid addr family, should be 4 or 6.');\n    }\n\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n  }\n  /**\n   * Returns if something is a Multiaddr that is a name\n   */\n\n\n  static isName(addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false;\n    } // if a part of the multiaddr is resolvable, then return true\n\n\n    return addr.protos().some(proto => proto.resolvable);\n  }\n  /**\n   * Check if object is a CID instance\n   */\n\n\n  static isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n\n\n  [inspect]() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n\n\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n\n}\nMultiaddr.resolvers = resolvers;\n/**\n * Static factory\n */\n\nexport function multiaddr(addr) {\n  return new Multiaddr(addr);\n}\nexport { getProtocol as protocols };\nexport { resolvers };","map":{"version":3,"mappings":"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","names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","IP_CODES","code","DNS_CODES","P2P_CODES","TCP_UDP_CODES","resolvers","Map","symbol","Multiaddr","constructor","addr","Object","defineProperty","value","Uint8Array","bytes","fromBytes","length","charAt","Error","fromString","isMultiaddr","bytesToString","toJSON","toOptions","codes","protoCodes","parts","split","slice","transport","port","includes","name","parseInt","opts","family","host","protos","map","assign","buf","i","decode","n","p","size","sizeForAddr","push","protoNames","proto","tuples","bytesToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolvable","resolver","get","addresses","a","nodeAddress","protocol","address","isThinWaistAddress","fromNodeAddress","ip","join","isName","some","Boolean","multiaddr","protocols"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@multiformats\\multiaddr\\src\\index.ts"],"sourcesContent":["import * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst IP_CODES = [\n  getProtocol('ip4').code,\n  getProtocol('ip6').code\n]\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nconst P2P_CODES = [\n  getProtocol('p2p').code,\n  getProtocol('ipfs').code\n]\n\nconst TCP_UDP_CODES = [\n  getProtocol('tcp').code,\n  getProtocol('udp').code\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nconst resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nexport class Multiaddr {\n  static resolvers = resolvers\n\n  public bytes: Uint8Array\n\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions (): MultiaddrObject {\n    const codes = this.protoCodes()\n    const parts = this.toString().split('/').slice(1)\n    let transport: string\n    let port: number\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name\n        port = 443\n      } else {\n        transport = getProtocol(parts[2]).name\n        port = parseInt(parts[3])\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name\n      port = 443\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes () {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr: MultiaddrInput) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate (addr: Multiaddr | string) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode (code: number) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals (addr: { bytes: Uint8Array }) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  async resolve (options?: AbortOptions) {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress (): NodeAddress {\n    const codes = this.protoCodes()\n    const names = this.protoNames()\n    const parts = this.toString().split('/').slice(1)\n    let protocol = getProtocol(parts[2]).code\n    let port = parseInt(parts[3])\n\n    // default to https when protocol & port are omitted from DNS addrs\n    if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n      protocol = getProtocol('tcp').code\n      port = 443\n    }\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    } else if (!IP_CODES.includes(codes[0]) && !DNS_CODES.includes(codes[0])) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns, dns4, dns6, dnsaddr}\".`)\n    } else if (!TCP_UDP_CODES.includes(protocol)) {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n    }\n\n    return {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      address: parts[1],\n      port // tcp or udp port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress (addr?: Multiaddr) {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   */\n  static fromNodeAddress (addr: NodeAddress, transport: string) {\n    if (addr == null) {\n      throw new Error('requires node address object')\n    }\n    if (transport == null) {\n      throw new Error('requires transport protocol')\n    }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error('Invalid addr family, should be 4 or 6.')\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   */\n  static isName (addr: Multiaddr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   */\n  static isMultiaddr (value: any): value is Multiaddr {\n    return Boolean(value?.[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Static factory\n */\nexport function multiaddr (addr: MultiaddrInput) {\n  return new Multiaddr(addr)\n}\n\nexport { getProtocol as protocols }\nexport { resolvers }\n"]},"metadata":{},"sourceType":"module"}