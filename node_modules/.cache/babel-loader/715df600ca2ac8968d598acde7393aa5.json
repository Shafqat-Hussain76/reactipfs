{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport HTTP from 'ipfs-utils/src/http.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const body = await res.text(); // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res);\n      error.message = body;\n      throw error;\n    }\n  }\n\n  return rm;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","HTTP","createRm","api","rm","path","options","res","post","signal","searchParams","arg","headers","body","text","error","HTTPError","message"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/files/rm.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,IAAI;EACvC;AACF;AACA;EACE,eAAeC,EAAf,CAAmBC,IAAnB,EAAuC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;MACrCC,MAAM,EAAEH,OAAO,CAACG,MADqB;MAErCC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEN,IADyB;QAE9B,GAAGC;MAF2B,CAAD,CAFM;MAMrCM,OAAO,EAAEN,OAAO,CAACM;IANoB,CAArB,CAAlB;IASA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB,CAVqC,CAWrC;IACA;;IACA,IAAID,IAAI,KAAK,EAAb,EAAiB;MACf;MACA,MAAME,KAAK,GAAG,IAAId,IAAI,CAACe,SAAT,CAAmBT,GAAnB,CAAd;MACAQ,KAAK,CAACE,OAAN,GAAgBJ,IAAhB;MACA,MAAME,KAAN;IACD;EACF;;EACD,OAAOX,EAAP;AACD,CAzBgC,CAA1B"},"metadata":{},"sourceType":"module"}