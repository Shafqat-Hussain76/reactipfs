{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(objectToCamelWithMetadata(data));\n  }\n\n  return stat;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createStat","api","stat","path","options","res","post","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","parse","hash"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/files/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,yBAAT,QAA0C,yCAA1C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGF,SAAS,CAACG,GAAG,IAAI;EACzC;AACF;AACA;EACE,eAAeC,IAAf,CAAqBC,IAArB,EAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACvC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;MACvCC,MAAM,EAAEH,OAAO,CAACG,MADuB;MAEvCC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEN,IADyB;QAE9B,GAAGC;MAF2B,CAAD,CAFQ;MAMvCM,OAAO,EAAEN,OAAO,CAACM;IANsB,CAAvB,CAAlB;IAQA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;IAEAD,IAAI,CAACE,YAAL,GAAoBF,IAAI,CAACE,YAAL,IAAqB,KAAzC;IACA,OAAOC,eAAe,CAACjB,yBAAyB,CAACc,IAAD,CAA1B,CAAtB;EACD;;EACD,OAAOT,IAAP;AACD,CAnBkC,CAA5B;AAqBP;AACA;AACA;;AACA,SAASY,eAAT,CAA0BC,KAA1B,EAAiC;EAC/BA,KAAK,CAACC,GAAN,GAAYpB,GAAG,CAACqB,KAAJ,CAAUF,KAAK,CAACG,IAAhB,CAAZ;EACA,OAAOH,KAAK,CAACG,IAAb;EACA,OAAOH,KAAP;AACD"},"metadata":{},"sourceType":"module"}