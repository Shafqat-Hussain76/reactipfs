{"ast":null,"code":"import { Multiaddr } from '@multiformats/multiaddr';\n\nconst reduceValue = (_, v) => v;\n\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts != null && opts.assumeHttp === false) return `tcp://${str}:${port}`; // check if tcp is the last protocol in multiaddr\n\n  let protocol = 'tcp';\n  let explicitPort = `:${port}`;\n  const last = parts[parts.length - 1];\n\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n\n  return `${protocol}://${str}${explicitPort}`;\n};\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : `[${content}]`,\n  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n};\nexport function multiaddrToUri(multiaddr, opts) {\n  const ma = new Multiaddr(multiaddr);\n  const parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(tuple => ({\n    protocol: parts.shift() ?? '',\n    content: tuple[1] != null ? parts.shift() ?? '' : ''\n  })).reduce((str, part, i, parts) => {\n    const reduce = Reducers[part.protocol];\n\n    if (reduce == null) {\n      throw new Error(`Unsupported protocol ${part.protocol}`);\n    }\n\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n}","map":{"version":3,"mappings":"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","names":["Multiaddr","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","multiaddrToUri","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["E:\\PIAIC\\Quater04\\MyAPPs\\reactipfs\\node_modules\\@multiformats\\multiaddr-to-uri\\src\\index.ts"],"sourcesContent":["import { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MultiaddrToUriOpts {\n  assumeHttp?: boolean\n}\n\ninterface Reducer { (str: string, content: string, i: number, parts: Part[], opts?: MultiaddrToUriOpts): string }\n\nconst reduceValue: Reducer = (_, v) => v\nconst tcpUri = (str: string, port: string, parts: Part[], opts?: MultiaddrToUriOpts) => {\n  // return tcp when explicitly requested\n  if ((opts != null) && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers: Record<string, Reducer> = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\ninterface Part {\n  protocol: string\n  content: string\n}\n\nexport function multiaddrToUri (multiaddr: Multiaddr | string | Uint8Array, opts?: MultiaddrToUriOpts) {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift() ?? '',\n      content: (tuple[1] != null) ? parts.shift() ?? '' : ''\n    }))\n    .reduce((str: string, part: Part, i: number, parts: Part[]) => {\n      const reduce = Reducers[part.protocol]\n      if (reduce == null) {\n        throw new Error(`Unsupported protocol ${part.protocol}`)\n      }\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"]},"metadata":{},"sourceType":"module"}