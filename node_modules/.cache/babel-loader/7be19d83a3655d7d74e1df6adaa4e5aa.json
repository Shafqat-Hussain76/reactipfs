{"ast":null,"code":"import { Multiaddr } from '@multiformats/multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    /** @type {{ Addrs: Record<string, string[]> }} */\n\n    const {\n      Addrs\n    } = await res.json();\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }));\n  }\n\n  return addrs;\n});","map":{"version":3,"names":["Multiaddr","configure","toUrlSearchParams","peerIdFromString","createAddrs","api","addrs","options","res","post","signal","searchParams","headers","Addrs","json","Object","keys","map","id","a"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/swarm/addrs.js"],"sourcesContent":["import { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }))\n  }\n  return addrs\n})\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C;AACF;AACA;EACE,eAAeC,KAAf,GAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAClC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;MACxCC,MAAM,EAAEH,OAAO,CAACG,MADwB;MAExCC,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFS;MAGxCK,OAAO,EAAEL,OAAO,CAACK;IAHuB,CAAxB,CAAlB;IAMA;;IACA,MAAM;MAAEC;IAAF,IAAY,MAAML,GAAG,CAACM,IAAJ,EAAxB;IAEA,OAAOC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,GAAnB,CAAuBC,EAAE,KAAK;MACnCA,EAAE,EAAEf,gBAAgB,CAACe,EAAD,CADe;MAEnCZ,KAAK,EAAE,CAACO,KAAK,CAACK,EAAD,CAAL,IAAa,EAAd,EAAkBD,GAAlB,CAAsBE,CAAC,IAAI,IAAInB,SAAJ,CAAcmB,CAAd,CAA3B;IAF4B,CAAL,CAAzB,CAAP;EAID;;EACD,OAAOb,KAAP;AACD,CApBmC,CAA7B"},"metadata":{},"sourceType":"module"}