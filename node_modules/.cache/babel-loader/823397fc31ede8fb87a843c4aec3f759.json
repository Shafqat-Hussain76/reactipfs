{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\n\nexport async function* resolve(cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid; // End iteration if there isn't a CID to follow any more\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n    }\n\n    const cid = CID.asCID(value);\n\n    if (cid) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  };\n}","map":{"version":3,"names":["CID","errCode","resolve","cid","path","codecs","getBlock","options","load","codec","getCodec","code","block","decode","parts","split","filter","Boolean","value","lastCid","length","key","shift","Error","Object","prototype","hasOwnProperty","call","remainderPath","join","asCID"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/lib/resolve.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,gBAAiBC,OAAjB,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuDC,OAAvD,EAAgE;EACrE;AACF;AACA;EACE,MAAMC,IAAI,GAAG,MAAOL,GAAP,IAAe;IAC1B,MAAMM,KAAK,GAAG,MAAMJ,MAAM,CAACK,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;IACA,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CAACH,GAAD,EAAMI,OAAN,CAA5B;IAEA,OAAOE,KAAK,CAACI,MAAN,CAAaD,KAAb,CAAP;EACD,CALD;;EAOA,MAAME,KAAK,GAAGV,IAAI,CAACW,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;EACA,IAAIC,KAAK,GAAG,MAAMV,IAAI,CAACL,GAAD,CAAtB;EACA,IAAIgB,OAAO,GAAGhB,GAAd,CAbqE,CAerE;;EACA,OAAOW,KAAK,CAACM,MAAb,EAAqB;IACnB,MAAMC,GAAG,GAAGP,KAAK,CAACQ,KAAN,EAAZ;;IAEA,IAAI,CAACD,GAAL,EAAU;MACR,MAAMpB,OAAO,CAAC,IAAIsB,KAAJ,CAAW,2BAA0BnB,IAAK,GAA1C,CAAD,EAAgD,kBAAhD,CAAb;IACD;;IAED,IAAIoB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,KAArC,EAA4CG,GAA5C,CAAJ,EAAsD;MACpDH,KAAK,GAAGA,KAAK,CAACG,GAAD,CAAb;MAEA,MAAM;QACJH,KADI;QAEJU,aAAa,EAAEd,KAAK,CAACe,IAAN,CAAW,GAAX;MAFX,CAAN;IAID,CAPD,MAOO;MACL,MAAM5B,OAAO,CAAC,IAAIsB,KAAJ,CAAW,kBAAiBF,GAAI,WAAUF,OAAQ,EAAlD,CAAD,EAAuD,aAAvD,CAAb;IACD;;IAED,MAAMhB,GAAG,GAAGH,GAAG,CAAC8B,KAAJ,CAAUZ,KAAV,CAAZ;;IAEA,IAAIf,GAAJ,EAAS;MACPgB,OAAO,GAAGhB,GAAV;MACAe,KAAK,GAAG,MAAMV,IAAI,CAACU,KAAD,CAAlB;IACD;EACF;;EAED,MAAM;IACJA,KADI;IAEJU,aAAa,EAAE;EAFX,CAAN;AAID"},"metadata":{},"sourceType":"module"}