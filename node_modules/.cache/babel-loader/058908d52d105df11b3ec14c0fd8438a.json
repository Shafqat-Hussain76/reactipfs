{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function* rmAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          yield* pin.Pins.map((\n          /** @type {string} */\n          cid) => CID.parse(cid));\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C;AACF;AACA;EACE,gBAAiBC,KAAjB,CAAwBC,MAAxB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC5C,WAAW,MAAM;MAAEC,IAAF;MAAQC;IAAR,CAAjB,IAAwCR,cAAc,CAACK,MAAD,CAAtD,EAAgE;MAC9D,MAAMI,YAAY,GAAG,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAArB;MACAA,YAAY,CAACE,MAAb,CAAoB,KAApB,EAA4B,GAAEJ,IAAK,EAAnC;MAEA,IAAIC,SAAS,IAAI,IAAjB,EAAuBC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BC,MAAM,CAACL,SAAD,CAApC;MAEvB,MAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAJ,CAAS,QAAT,EAAmB;QACnCC,MAAM,EAAEV,OAAO,CAACU,MADmB;QAEnCC,OAAO,EAAEX,OAAO,CAACW,OAFkB;QAGnCR,YAAY,EAAER,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;UAE9BY,GAAG,EAAG,GAAEX,IAAK,EAFiB;UAG9BC;QAH8B,CAAD;MAHI,CAAnB,CAAlB;;MAUA,WAAW,MAAMW,GAAjB,IAAwBL,GAAG,CAACM,MAAJ,EAAxB,EAAsC;QACpC,IAAID,GAAG,CAACE,IAAR,EAAc;UAAE;UACd,OAAQF,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAa;UAAC;UAAsBC,GAAvB,KAA+BzB,GAAG,CAAC0B,KAAJ,CAAUD,GAAV,CAA5C,CAAR;UACA;QACD;;QACD,MAAMzB,GAAG,CAAC0B,KAAJ,CAAUL,GAAV,CAAN;MACD;IACF;EACF;;EACD,OAAOf,KAAP;AACD,CA/BmC,CAA7B"},"metadata":{},"sourceType":"module"}