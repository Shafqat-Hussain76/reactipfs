{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from '@multiformats/multiaddr';\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        all: true\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map((\n      /** @type {string} */\n      ma) => new Multiaddr(ma))\n    };\n  }\n\n  return clear;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","Multiaddr","createClear","api","clear","options","res","post","signal","searchParams","all","headers","Peers","json","map","ma"],"sources":["E:/PIAIC/Quater04/MyAPPs/reactipfs/node_modules/ipfs-http-client/src/bootstrap/clear.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return clear\n})\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C;AACF;AACA;EACE,eAAeC,KAAf,GAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAClC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;MACzCC,MAAM,EAAEH,OAAO,CAACG,MADyB;MAEzCC,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;QAE9BK,GAAG,EAAE;MAFyB,CAAD,CAFU;MAMzCC,OAAO,EAAEN,OAAO,CAACM;IANwB,CAAzB,CAAlB;IASA,MAAM;MAAEC;IAAF,IAAY,MAAMN,GAAG,CAACO,IAAJ,EAAxB;IAEA,OAAO;MAAED,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;MAAC;MAAsBC,EAAvB,KAA8B,IAAId,SAAJ,CAAcc,EAAd,CAAxC;IAAT,CAAP;EACD;;EAED,OAAOX,KAAP;AACD,CApBmC,CAA7B"},"metadata":{},"sourceType":"module"}